/*
* Copyright 2018 El Mostafa IDRASSI <mostafa.idrassi@tutanota.com>.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#include "HashLib.h"

/* Basic headers for std::cerr and EXIT_values and memcmp */
#include <iostream>
#include <cstring>

int HashLib_Init()
{
	HashContext * MD5 = HashContext::createHashContext(md5);
	HashContext * SHA1 = HashContext::createHashContext(sha1);
	HashContext * SHA256 = HashContext::createHashContext(sha256);
	HashContext * SHA384 = HashContext::createHashContext(sha384);
	HashContext * SHA512 = HashContext::createHashContext(sha512);

	unsigned char in_md5[3] = { 0x61, 0x62, 0x63 };
	unsigned char in_short_sha1[7] = { 0x63, 0xbf, 0xc1, 0xed, 0x7f, 0x78, 0xab };
	unsigned char in_long_sha1[163] = { 0x7c, 0x9c, 0x67, 0x32, 0x3a, 0x1d, 0xf1, 0xad,
		0xbf, 0xe5, 0xce, 0xb4, 0x15, 0xea, 0xef, 0x01,
		0x55, 0xec, 0xe2, 0x82, 0x0f, 0x4d, 0x50, 0xc1,
		0xec, 0x22, 0xcb, 0xa4, 0x92, 0x8a, 0xc6, 0x56,
		0xc8, 0x3f, 0xe5, 0x85, 0xdb, 0x6a, 0x78, 0xce,
		0x40, 0xbc, 0x42, 0x75, 0x7a, 0xba, 0x7e, 0x5a,
		0x3f, 0x58, 0x24, 0x28, 0xd6, 0xca, 0x68, 0xd0,
		0xc3, 0x97, 0x83, 0x36, 0xa6, 0xef, 0xb7, 0x29,
		0x61, 0x3e, 0x8d, 0x99, 0x79, 0x01, 0x62, 0x04,
		0xbf, 0xd9, 0x21, 0x32, 0x2f, 0xdd, 0x52, 0x22,
		0x18, 0x35, 0x54, 0x44, 0x7d, 0xe5, 0xe6, 0xe9,
		0xbb, 0xe6, 0xed, 0xf7, 0x6d, 0x7b, 0x71, 0xe1,
		0x8d, 0xc2, 0xe8, 0xd6, 0xdc, 0x89, 0xb7, 0x39,
		0x83, 0x64, 0xf6, 0x52, 0xfa, 0xfc, 0x73, 0x43,
		0x29, 0xaa, 0xfa, 0x3d, 0xcd, 0x45, 0xd4, 0xf3,
		0x1e, 0x38, 0x8e, 0x4f, 0xaf, 0xd7, 0xfc, 0x64,
		0x95, 0xf3, 0x7c, 0xa5, 0xcb, 0xab, 0x7f, 0x54,
		0xd5, 0x86, 0x46, 0x3d, 0xa4, 0xbf, 0xea, 0xa3,
		0xba, 0xe0, 0x9f, 0x7b, 0x8e, 0x92, 0x39, 0xd8,
		0x32, 0xb4, 0xf0, 0xa7, 0x33, 0xaa, 0x60, 0x9c,
		0xc1, 0xf8, 0xd4 };
	unsigned char in_short_sha256[47] = { 0xc4, 0xad, 0x3c, 0x5e, 0x78, 0xd9, 0x17, 0xec,
		0xb0, 0xcb, 0xbc, 0xd1, 0xc4, 0x81, 0xfc, 0x2a,
		0xaf, 0x23, 0x2f, 0x7e, 0x28, 0x97, 0x79, 0xf4,
		0x0e, 0x50, 0x4c, 0xc3, 0x09, 0x66, 0x2e, 0xe9,
		0x6f, 0xec, 0xbd, 0x20, 0x64, 0x7e, 0xf0, 0x0e,
		0x46, 0x19, 0x9f, 0xbc, 0x48, 0x2f, 0x46 };
	unsigned char in_long_sha256[163] = { 0x45, 0x11, 0x01, 0x25, 0x0e, 0xc6, 0xf2, 0x66,
		0x52, 0x24, 0x9d, 0x59, 0xdc, 0x97, 0x4b, 0x73,
		0x61, 0xd5, 0x71, 0xa8, 0x10, 0x1c, 0xdf, 0xd3,
		0x6a, 0xba, 0x3b, 0x58, 0x54, 0xd3, 0xae, 0x08,
		0x6b, 0x5f, 0xdd, 0x45, 0x97, 0x72, 0x1b, 0x66,
		0xe3, 0xc0, 0xdc, 0x5d, 0x8c, 0x60, 0x6d, 0x96,
		0x57, 0xd0, 0xe3, 0x23, 0x28, 0x3a, 0x52, 0x17,
		0xd1, 0xf5, 0x3f, 0x2f, 0x28, 0x4f, 0x57, 0xb8,
		0x5c, 0x8a, 0x61, 0xac, 0x89, 0x24, 0x71, 0x1f,
		0x89, 0x5c, 0x5e, 0xd9, 0x0e, 0xf1, 0x77, 0x45,
		0xed, 0x2d, 0x72, 0x8a, 0xbd, 0x22, 0xa5, 0xf7,
		0xa1, 0x34, 0x79, 0xa4, 0x62, 0xd7, 0x1b, 0x56,
		0xc1, 0x9a, 0x74, 0xa4, 0x0b, 0x65, 0x5c, 0x58,
		0xed, 0xfe, 0x0a, 0x18, 0x8a, 0xd2, 0xcf, 0x46,
		0xcb, 0xf3, 0x05, 0x24, 0xf6, 0x5d, 0x42, 0x3c,
		0x83, 0x7d, 0xd1, 0xff, 0x2b, 0xf4, 0x62, 0xac,
		0x41, 0x98, 0x00, 0x73, 0x45, 0xbb, 0x44, 0xdb,
		0xb7, 0xb1, 0xc8, 0x61, 0x29, 0x8c, 0xdf, 0x61,
		0x98, 0x2a, 0x83, 0x3a, 0xfc, 0x72, 0x8f, 0xae,
		0x1e, 0xda, 0x2f, 0x87, 0xaa, 0x2c, 0x94, 0x80,
		0x85, 0x8b, 0xec };
	unsigned char in_short_sha384[17] = { 0xbb, 0x84, 0xa0, 0x14, 0xcd, 0x17, 0xcc, 0x23,
		0x2c, 0x98, 0xae, 0x8b, 0x07, 0x09, 0x91, 0x7e,
		0x9d };
	unsigned char in_long_sha384[227] = { 0x62, 0xc6, 0xa1, 0x69, 0xb9, 0xbe, 0x02, 0xb3,
		0xd7, 0xb4, 0x71, 0xa9, 0x64, 0xfc, 0x0b, 0xcc,
		0x72, 0xb4, 0x80, 0xd2, 0x6a, 0xec, 0xb2, 0xed,
		0x46, 0x0b, 0x7f, 0x50, 0x01, 0x6d, 0xda, 0xf0,
		0x4c, 0x51, 0x21, 0x87, 0x83, 0xf3, 0xaa, 0xdf,
		0xdf, 0xf5, 0xa0, 0x4d, 0xed, 0x03, 0x0d, 0x7b,
		0x3f, 0xb7, 0x37, 0x6b, 0x61, 0xba, 0x30, 0xb9,
		0x0e, 0x2d, 0xa9, 0x21, 0xa4, 0x47, 0x07, 0x40,
		0xd6, 0x3f, 0xb9, 0x9f, 0xa1, 0x6c, 0xc8, 0xed,
		0x81, 0xab, 0xaf, 0x8c, 0xe4, 0x01, 0x6e, 0x50,
		0xdf, 0x81, 0xda, 0x83, 0x20, 0x70, 0x37, 0x2c,
		0x24, 0xa8, 0x08, 0x90, 0xaa, 0x3a, 0x26, 0xfa,
		0x67, 0x57, 0x10, 0xb8, 0xfb, 0x71, 0x82, 0x66,
		0x24, 0x9d, 0x49, 0x6f, 0x31, 0x3c, 0x55, 0xd0,
		0xba, 0xda, 0x10, 0x1f, 0x8f, 0x56, 0xee, 0xcc,
		0xee, 0x43, 0x45, 0xa8, 0xf9, 0x8f, 0x60, 0xa3,
		0x66, 0x62, 0xcf, 0xda, 0x79, 0x49, 0x00, 0xd1,
		0x2f, 0x94, 0x14, 0xfc, 0xbd, 0xfd, 0xeb, 0x85,
		0x38, 0x8a, 0x81, 0x49, 0x96, 0xb4, 0x7e, 0x24,
		0xd5, 0xc8, 0x08, 0x6e, 0x7a, 0x8e, 0xdc, 0xc5,
		0x3d, 0x29, 0x9d, 0x0d, 0x03, 0x3e, 0x6b, 0xb6,
		0x0c, 0x58, 0xb8, 0x3d, 0x6e, 0x8b, 0x57, 0xf6,
		0xc2, 0x58, 0xd6, 0x08, 0x1d, 0xd1, 0x0e, 0xb9,
		0x42, 0xfd, 0xf8, 0xec, 0x15, 0x7e, 0xc3, 0xe7,
		0x53, 0x71, 0x23, 0x5a, 0x81, 0x96, 0xeb, 0x9d,
		0x22, 0xb1, 0xde, 0x3a, 0x2d, 0x30, 0xc2, 0xab,
		0xbe, 0x0d, 0xb7, 0x65, 0x0c, 0xf6, 0xc7, 0x15,
		0x9b, 0xac, 0xbe, 0x29, 0xb3, 0xa9, 0x3c, 0x92,
		0x10, 0x05, 0x08 };
	unsigned char in_short_sha512[11] = { 0x62, 0x13, 0xe1, 0x0a, 0x44, 0x20, 0xe0, 0xd9,
		0xb7, 0x70, 0x37 };
	unsigned char in_long_sha512[227] = { 0x4f, 0x05, 0x60, 0x09, 0x50, 0x66, 0x4d, 0x51,
		0x90, 0xa2, 0xeb, 0xc2, 0x9c, 0x9e, 0xdb, 0x89,
		0xc2, 0x00, 0x79, 0xa4, 0xd3, 0xe6, 0xbc, 0x3b,
		0x27, 0xd7, 0x5e, 0x34, 0xe2, 0xfa, 0x3d, 0x02,
		0x76, 0x85, 0x02, 0xbd, 0x69, 0x79, 0x00, 0x78,
		0x59, 0x8d, 0x5f, 0xcf, 0x3d, 0x67, 0x79, 0xbf,
		0xed, 0x12, 0x84, 0xbb, 0xe5, 0xad, 0x72, 0xfb,
		0x45, 0x60, 0x15, 0x18, 0x1d, 0x95, 0x87, 0xd6,
		0xe8, 0x64, 0xc9, 0x40, 0x56, 0x4e, 0xaa, 0xfb,
		0x4f, 0x2f, 0xea, 0xd4, 0x34, 0x6e, 0xa0, 0x9b,
		0x68, 0x77, 0xd9, 0x34, 0x0f, 0x6b, 0x82, 0xeb,
		0x15, 0x15, 0x88, 0x08, 0x72, 0x21, 0x3d, 0xa3,
		0xad, 0x88, 0xfe, 0xba, 0x9f, 0x4f, 0x13, 0x81,
		0x7a, 0x71, 0xd6, 0xf9, 0x0a, 0x1a, 0x17, 0xc4,
		0x3a, 0x15, 0xc0, 0x38, 0xd9, 0x88, 0xb5, 0xb2,
		0x9e, 0xdf, 0xfe, 0x2d, 0x6a, 0x06, 0x28, 0x13,
		0xce, 0xdb, 0xe8, 0x52, 0xcd, 0xe3, 0x02, 0xb3,
		0xe3, 0x3b, 0x69, 0x68, 0x46, 0xd2, 0xa8, 0xe3,
		0x6b, 0xd6, 0x80, 0xef, 0xcc, 0x6c, 0xd3, 0xf9,
		0xe9, 0xa4, 0xc1, 0xae, 0x8c, 0xac, 0x10, 0xcc,
		0x52, 0x44, 0xd1, 0x31, 0x67, 0x71, 0x40, 0x39,
		0x91, 0x76, 0xed, 0x46, 0x70, 0x00, 0x19, 0xa0,
		0x04, 0xa1, 0x63, 0x80, 0x6f, 0x7f, 0xa4, 0x67,
		0xfc, 0x4e, 0x17, 0xb4, 0x61, 0x7b, 0xbd, 0x76,
		0x41, 0xaa, 0xff, 0x7f, 0xf5, 0x63, 0x96, 0xba,
		0x8c, 0x08, 0xa8, 0xbe, 0x10, 0x0b, 0x33, 0xa2,
		0x0b, 0x5d, 0xaf, 0x13, 0x4a, 0x2a, 0xef, 0xa5,
		0xe1, 0xc3, 0x49, 0x67, 0x70, 0xdc, 0xf6, 0xba,
		0xa4, 0xf7, 0xbb };

	unsigned char md5d[16 + 1];
	unsigned char sha1d[20 + 1];
	unsigned char sha256d[32 + 1];
	unsigned char sha384d[48 + 1];
	unsigned char sha512d[64 + 1];

	unsigned char md5_exp[16 + 1] = { 0x90, 0x01, 0x50, 0x98, 0x3c, 0xd2, 0x4f, 0xb0,
		0xd6, 0x96, 0x3f, 0x7d, 0x28, 0xe1, 0x7f, 0x72 };
	unsigned char sha1_sexp[20 + 1] = {
		0x86, 0x03, 0x28, 0xd8, 0x05, 0x09, 0x50, 0x0c,
		0x17, 0x83, 0x16, 0x9e, 0xbf, 0x0b, 0xa0, 0xc4,
		0xb9, 0x4d, 0xa5, 0xe5
	};
	unsigned char sha1_lexp[20 + 1] = {
		0xd8, 0xfd, 0x6a, 0x91, 0xef, 0x3b, 0x6c, 0xed,
		0x05, 0xb9, 0x83, 0x58, 0xa9, 0x91, 0x07, 0xc1,
		0xfa, 0xc8, 0xc8, 0x07
	};
	unsigned char sha256_sexp[32 + 1] = {
		0x50, 0xdb, 0xf4, 0x00, 0x66, 0xf8, 0xd2, 0x70,
		0x48, 0x4e, 0xe2, 0xef, 0x66, 0x32, 0x28, 0x2d,
		0xfa, 0x30, 0x0a, 0x85, 0xa8, 0x53, 0x0e, 0xce,
		0xeb, 0x0e, 0x04, 0x27, 0x5e, 0x1c, 0x1e, 0xfd
	};
	unsigned char sha256_lexp[32 + 1] = {
		0x3c, 0x59, 0x3a, 0xa5, 0x39, 0xfd, 0xcd, 0xae,
		0x51, 0x6c, 0xdf, 0x2f, 0x15, 0x00, 0x0f, 0x66,
		0x34, 0x18, 0x5c, 0x88, 0xf5, 0x05, 0xb3, 0x97,
		0x75, 0xfb, 0x9a, 0xb1, 0x37, 0xa1, 0x0a, 0xa2
	};
	unsigned char sha384_sexp[48 + 1] = {
		0x85, 0x22, 0x7a, 0xe0, 0x57, 0xf2, 0x08, 0x2a,
		0xdf, 0x17, 0x8c, 0xae, 0x99, 0x64, 0x49, 0x10,
		0x0b, 0x6a, 0x31, 0x19, 0xe4, 0xc4, 0x15, 0xa9,
		0x9e, 0x25, 0xbe, 0x6e, 0xf2, 0x0b, 0xa8, 0xc0,
		0xea, 0xe8, 0x18, 0xd6, 0x0f, 0x71, 0xc5, 0xc8,
		0x3f, 0xf2, 0xd4, 0xc5, 0x9a, 0xa7, 0x52, 0x63
	};
	unsigned char sha384_lexp[48 + 1] = {
		0x07, 0x30, 0xe1, 0x84, 0xe7, 0x79, 0x55, 0x75,
		0x56, 0x9f, 0x87, 0x03, 0x02, 0x60, 0xbb, 0x8e,
		0x54, 0x49, 0x8e, 0x0e, 0x5d, 0x09, 0x6b, 0x18,
		0x28, 0x5e, 0x98, 0x8d, 0x24, 0x5b, 0x6f, 0x34,
		0x86, 0xd1, 0xf2, 0x44, 0x7d, 0x5f, 0x85, 0xbc,
		0xbe, 0x59, 0xd5, 0x68, 0x9f, 0xc4, 0x94, 0x25
	};
	unsigned char sha512_sexp[64 + 1] = {
		0x99, 0x82, 0xdc, 0x2a, 0x04, 0xdf, 0xf1, 0x65,
		0x56, 0x7f, 0x27, 0x6f, 0xd4, 0x63, 0xef, 0xef,
		0x2b, 0x36, 0x9f, 0xa2, 0xfb, 0xca, 0x8c, 0xee,
		0x31, 0xce, 0x0d, 0xe8, 0xa7, 0x9a, 0x2e, 0xb0,
		0xb5, 0x3e, 0x43, 0x7f, 0x7d, 0x9d, 0x1f, 0x41,
		0xc7, 0x1d, 0x72, 0x5c, 0xab, 0xb9, 0x49, 0xb5,
		0x13, 0x07, 0x5b, 0xad, 0x17, 0x40, 0xc9, 0xee,
		0xfb, 0xf6, 0xa5, 0xc6, 0x63, 0x34, 0x00, 0xc7
	};
	unsigned char sha512_lexp[64 + 1] = {
		0xa9, 0xdb, 0x49, 0x0c, 0x70, 0x8c, 0xc7, 0x25,
		0x48, 0xd7, 0x86, 0x35, 0xaa, 0x7d, 0xa7, 0x9b,
		0xb2, 0x53, 0xf9, 0x45, 0xd7, 0x10, 0xe5, 0xcb,
		0x67, 0x7a, 0x47, 0x4e, 0xfc, 0x7c, 0x65, 0xa2,
		0xaa, 0xb4, 0x5b, 0xc7, 0xca, 0x11, 0x13, 0xc8,
		0xce, 0x0f, 0x3c, 0x32, 0xe1, 0x39, 0x9d, 0xe9,
		0xc4, 0x59, 0x53, 0x5e, 0x88, 0x16, 0x52, 0x1a,
		0xb7, 0x14, 0xb2, 0xa6, 0xcd, 0x20, 0x05, 0x25
	};

	if (1 != MD5->initHashCtx() || 1 != MD5->updateHashCtx((char*)in_md5, 3) || 1 != MD5->finalHashCtx(md5d) ||
		memcmp(md5d, md5_exp, 16)) {
		std::cerr << "Library initialization failed - MD5.\n";
		return(1);
	}
	MD5->cleanup();

	if (1 != SHA1->initHashCtx() || 1 != SHA1->updateHashCtx((char*)in_short_sha1, 7) || 1 != SHA1->finalHashCtx(sha1d) ||
		memcmp(sha1d, sha1_sexp, 20)) {
		std::cerr << "Library initialization failed - SHA1 short message.\n";
		return(1);
	}
	SHA1->cleanup();
	SHA1 = HashContext::createHashContext(sha1);
	if (1 != SHA1->initHashCtx() || 1 != SHA1->updateHashCtx((char*)in_long_sha1, 163) || 1 != SHA1->finalHashCtx(sha1d) ||
		memcmp(sha1d, sha1_lexp, 20)) {
		std::cerr << "Library initialization failed - SHA1 long message.\n";
		return(1);
	}
	SHA1->cleanup();

	if (1 != SHA256->initHashCtx() || 1 != SHA256->updateHashCtx((char*)in_short_sha256, 47) || 1 != SHA256->finalHashCtx(sha256d) ||
		memcmp(sha256d, sha256_sexp, 32)) {
		std::cerr << "Library initialization failed - SHA256 short message.\n";
		return(1);
	}
	SHA256->cleanup();
	SHA256 = HashContext::createHashContext(sha256);
	if (1 != SHA256->initHashCtx() || 1 != SHA256->updateHashCtx((char*)in_long_sha256, 163) || 1 != SHA256->finalHashCtx(sha256d) ||
		memcmp(sha256d, sha256_lexp, 32)) {
		std::cerr << "Library initialization failed - SHA256 long message.\n";
		return(1);
	}
	SHA256->cleanup();

	if (1 != SHA384->initHashCtx() || 1 != SHA384->updateHashCtx((char*)in_short_sha384, 17) || 1 != SHA384->finalHashCtx(sha384d) ||
		memcmp(sha384d, sha384_sexp, 48)) {
		std::cerr << "Library initialization failed - SHA384 short message.\n";
		return(1);
	}
	SHA384->cleanup();
	SHA384 = HashContext::createHashContext(sha384);
	if (1 != SHA384->initHashCtx() || 1 != SHA384->updateHashCtx((char*)in_long_sha384, 227) || 1 != SHA384->finalHashCtx(sha384d) ||
		memcmp(sha384d, sha384_lexp, 48)) {
		std::cerr << "Library initialization failed - SHA384 short message.\n";
		return(1);
	}
	SHA384->cleanup();

	if (1 != SHA512->initHashCtx() || 1 != SHA512->updateHashCtx((char*)in_short_sha512, 11) || 1 != SHA512->finalHashCtx(sha512d) ||
		memcmp(sha512d, sha512_sexp, 64)) {
		std::cerr << "Library initialization failed - SHA512 short message.\n";
		return(1);
	}
	SHA512->cleanup();
	SHA512 = HashContext::createHashContext(sha512);
	if (1 != SHA512->initHashCtx() || 1 != SHA512->updateHashCtx((char*)in_long_sha512, 227) || 1 != SHA512->finalHashCtx(sha512d) ||
		memcmp(sha512d, sha512_lexp, 64)) {
		std::cerr << "Library initialization failed - SHA512 long message.\n";
		return(1);
	}
	SHA512->cleanup();

	delete(MD5);
	delete(SHA1);
	delete(SHA256);
	delete(SHA384);
	delete(SHA512);

	return 0;
}