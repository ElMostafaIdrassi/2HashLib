/*
* Copyright 2018 El Mostafa IDRASSI <mostafa.idrassi@tutanota.com>.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#include <iostream>
#include <cstring>

#include "HashContext.h"

/*  ====================================================================
*	Makes sure the sha1 API is working as expected
*	Based on FIPS 180-4 NIST test vectors (byte-oriented) : http://csrc.nist.gov/groups/STM/cavp/secure-hashing.html
*/

int sha384Test()
{
	HashContext * SHA384 = HashContext::createHashContext(sha384);

	/*
	* in_short_sha384 contains the input short test vector
	* in_long_sha384 contains the input long test vector
	*/
	unsigned char in_short_sha384[17] = { 0xbb, 0x84, 0xa0, 0x14, 0xcd, 0x17, 0xcc, 0x23,
		0x2c, 0x98, 0xae, 0x8b, 0x07, 0x09, 0x91, 0x7e,
		0x9d };
	unsigned char in_long_sha384[227] = { 0x62, 0xc6, 0xa1, 0x69, 0xb9, 0xbe, 0x02, 0xb3,
		0xd7, 0xb4, 0x71, 0xa9, 0x64, 0xfc, 0x0b, 0xcc,
		0x72, 0xb4, 0x80, 0xd2, 0x6a, 0xec, 0xb2, 0xed,
		0x46, 0x0b, 0x7f, 0x50, 0x01, 0x6d, 0xda, 0xf0,
		0x4c, 0x51, 0x21, 0x87, 0x83, 0xf3, 0xaa, 0xdf,
		0xdf, 0xf5, 0xa0, 0x4d, 0xed, 0x03, 0x0d, 0x7b,
		0x3f, 0xb7, 0x37, 0x6b, 0x61, 0xba, 0x30, 0xb9,
		0x0e, 0x2d, 0xa9, 0x21, 0xa4, 0x47, 0x07, 0x40,
		0xd6, 0x3f, 0xb9, 0x9f, 0xa1, 0x6c, 0xc8, 0xed,
		0x81, 0xab, 0xaf, 0x8c, 0xe4, 0x01, 0x6e, 0x50,
		0xdf, 0x81, 0xda, 0x83, 0x20, 0x70, 0x37, 0x2c,
		0x24, 0xa8, 0x08, 0x90, 0xaa, 0x3a, 0x26, 0xfa,
		0x67, 0x57, 0x10, 0xb8, 0xfb, 0x71, 0x82, 0x66,
		0x24, 0x9d, 0x49, 0x6f, 0x31, 0x3c, 0x55, 0xd0,
		0xba, 0xda, 0x10, 0x1f, 0x8f, 0x56, 0xee, 0xcc,
		0xee, 0x43, 0x45, 0xa8, 0xf9, 0x8f, 0x60, 0xa3,
		0x66, 0x62, 0xcf, 0xda, 0x79, 0x49, 0x00, 0xd1,
		0x2f, 0x94, 0x14, 0xfc, 0xbd, 0xfd, 0xeb, 0x85,
		0x38, 0x8a, 0x81, 0x49, 0x96, 0xb4, 0x7e, 0x24,
		0xd5, 0xc8, 0x08, 0x6e, 0x7a, 0x8e, 0xdc, 0xc5,
		0x3d, 0x29, 0x9d, 0x0d, 0x03, 0x3e, 0x6b, 0xb6,
		0x0c, 0x58, 0xb8, 0x3d, 0x6e, 0x8b, 0x57, 0xf6,
		0xc2, 0x58, 0xd6, 0x08, 0x1d, 0xd1, 0x0e, 0xb9,
		0x42, 0xfd, 0xf8, 0xec, 0x15, 0x7e, 0xc3, 0xe7,
		0x53, 0x71, 0x23, 0x5a, 0x81, 0x96, 0xeb, 0x9d,
		0x22, 0xb1, 0xde, 0x3a, 0x2d, 0x30, 0xc2, 0xab,
		0xbe, 0x0d, 0xb7, 0x65, 0x0c, 0xf6, 0xc7, 0x15,
		0x9b, 0xac, 0xbe, 0x29, 0xb3, 0xa9, 0x3c, 0x92,
		0x10, 0x05, 0x08 };

	/*
	* sha384d will contain the digest of the input message
	*/
	unsigned char sha384d[48];

	/*
	*  sha384_sexp and sha384_lexp contain the expected digests of the inputs messages
	*  They will be compared to sha384d to determine whether the
	*      implementation of sha384 has not been tempered with
	*/
	unsigned char sha384_sexp[48] = {
		0x85, 0x22, 0x7a, 0xe0, 0x57, 0xf2, 0x08, 0x2a,
		0xdf, 0x17, 0x8c, 0xae, 0x99, 0x64, 0x49, 0x10,
		0x0b, 0x6a, 0x31, 0x19, 0xe4, 0xc4, 0x15, 0xa9,
		0x9e, 0x25, 0xbe, 0x6e, 0xf2, 0x0b, 0xa8, 0xc0,
		0xea, 0xe8, 0x18, 0xd6, 0x0f, 0x71, 0xc5, 0xc8,
		0x3f, 0xf2, 0xd4, 0xc5, 0x9a, 0xa7, 0x52, 0x63
	};
	unsigned char sha384_lexp[48] = {
		0x07, 0x30, 0xe1, 0x84, 0xe7, 0x79, 0x55, 0x75,
		0x56, 0x9f, 0x87, 0x03, 0x02, 0x60, 0xbb, 0x8e,
		0x54, 0x49, 0x8e, 0x0e, 0x5d, 0x09, 0x6b, 0x18,
		0x28, 0x5e, 0x98, 0x8d, 0x24, 0x5b, 0x6f, 0x34,
		0x86, 0xd1, 0xf2, 0x44, 0x7d, 0x5f, 0x85, 0xbc,
		0xbe, 0x59, 0xd5, 0x68, 0x9f, 0xc4, 0x94, 0x25
	};

	int exitStatus1 = 0;

	std::cout << "Starting SHA384 test 1/2 : ...";

	if (1 != SHA384->initHashCtx()) exitStatus1 = 1;
	if (1 != SHA384->updateHashCtx((char*)in_short_sha384, 17)) exitStatus1 = 2;
	if (1 != SHA384->finalHashCtx(sha384d)) exitStatus1 = 3;
	if (memcmp(sha384d, sha384_sexp, 48)) exitStatus1 = 4;
	
	SHA384->cleanup();

	if (0 == exitStatus1) {
		std::cout << "Completed! \n\tSHA384 test 1/2 : Successful.\n";
	}
	else {
		switch (exitStatus1) {
		case 1:
			std::cout << "Terminated! \n\tSHA384 test 1/2 : Failed - initCtx().\n";
			break;
		case 2:
			std::cout << "Terminated! \n\tSHA384 test 1/2 : Failed - updateCtx().\n";
			break;
		case 3:
			std::cout << "Terminated! \n\tSHA384 test 1/2 : Failed - finaleCtx().\n";
			break;
		case 4:
			std::cout << "Terminated! \n\tSHA384 test 1/2 : Failed - memcmp().\n";
			break;
		default:
			break;
		}
	}
	
	SHA384 = HashContext::createHashContext(sha384);

	int exitStatus2 = 0;

	std::cout << "Starting SHA384 test 2/2 : ...";

	if (1 != SHA384->initHashCtx()) exitStatus2 = 1;
	if (1 != SHA384->updateHashCtx((char*)in_long_sha384, 227)) exitStatus2 = 2;
	if (1 != SHA384->finalHashCtx(sha384d)) exitStatus2 = 3;
	if (memcmp(sha384d, sha384_lexp, 48)) exitStatus2 = 4;
	
	SHA384->cleanup();
	
	if (0 == exitStatus2) {
		std::cout << "Completed! \n\tSHA384 test 2/2 : Successful.\n";
	}
	else {
		switch (exitStatus2) {
		case 1:
			std::cout << "Terminated! \n\tSHA384 test 2/2 : Failed - initCtx().\n";
			break;
		case 2:
			std::cout << "Terminated! \n\tSHA384 test 2/2 : Failed - updateCtx().\n";
			break;
		case 3:
			std::cout << "Terminated! \n\tSHA384 test 2/2 : Failed - finaleCtx().\n";
			break;
		case 4:
			std::cout << "Terminated! \n\tSHA384 test 2/2 : Failed - memcmp().\n";
			break;
		default:
			break;
		}
	}

	delete(SHA384);

	if (exitStatus1 != 0) return exitStatus1;
	if (exitStatus2 != 0) return exitStatus2;
	return 0;
}