/*
* Copyright 2018 El Mostafa IDRASSI <mostafa.idrassi@tutanota.com>.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#include <iostream>
#include <cstring>

#include "HashContext.h"

/*  ====================================================================
*	Makes sure the sha1 API is working as expected
*	Based on FIPS 180-4 NIST test vectors (byte-oriented) : http://csrc.nist.gov/groups/STM/cavp/secure-hashing.html
*/
int sha256Test()
{
	HashContext * SHA256 = HashContext::createHashContext(sha256);

	/*
	* in_short_sha256 contains the input short test vector
	* in_long_sha256 contains the input long test vector
	*/
	unsigned char in_short_sha256[47] = { 0xc4, 0xad, 0x3c, 0x5e, 0x78, 0xd9, 0x17, 0xec,
		0xb0, 0xcb, 0xbc, 0xd1, 0xc4, 0x81, 0xfc, 0x2a,
		0xaf, 0x23, 0x2f, 0x7e, 0x28, 0x97, 0x79, 0xf4,
		0x0e, 0x50, 0x4c, 0xc3, 0x09, 0x66, 0x2e, 0xe9,
		0x6f, 0xec, 0xbd, 0x20, 0x64, 0x7e, 0xf0, 0x0e,
		0x46, 0x19, 0x9f, 0xbc, 0x48, 0x2f, 0x46 };
	unsigned char in_long_sha256[163] = { 0x45, 0x11, 0x01, 0x25, 0x0e, 0xc6, 0xf2, 0x66,
		0x52, 0x24, 0x9d, 0x59, 0xdc, 0x97, 0x4b, 0x73,
		0x61, 0xd5, 0x71, 0xa8, 0x10, 0x1c, 0xdf, 0xd3,
		0x6a, 0xba, 0x3b, 0x58, 0x54, 0xd3, 0xae, 0x08,
		0x6b, 0x5f, 0xdd, 0x45, 0x97, 0x72, 0x1b, 0x66,
		0xe3, 0xc0, 0xdc, 0x5d, 0x8c, 0x60, 0x6d, 0x96,
		0x57, 0xd0, 0xe3, 0x23, 0x28, 0x3a, 0x52, 0x17,
		0xd1, 0xf5, 0x3f, 0x2f, 0x28, 0x4f, 0x57, 0xb8,
		0x5c, 0x8a, 0x61, 0xac, 0x89, 0x24, 0x71, 0x1f,
		0x89, 0x5c, 0x5e, 0xd9, 0x0e, 0xf1, 0x77, 0x45,
		0xed, 0x2d, 0x72, 0x8a, 0xbd, 0x22, 0xa5, 0xf7,
		0xa1, 0x34, 0x79, 0xa4, 0x62, 0xd7, 0x1b, 0x56,
		0xc1, 0x9a, 0x74, 0xa4, 0x0b, 0x65, 0x5c, 0x58,
		0xed, 0xfe, 0x0a, 0x18, 0x8a, 0xd2, 0xcf, 0x46,
		0xcb, 0xf3, 0x05, 0x24, 0xf6, 0x5d, 0x42, 0x3c,
		0x83, 0x7d, 0xd1, 0xff, 0x2b, 0xf4, 0x62, 0xac,
		0x41, 0x98, 0x00, 0x73, 0x45, 0xbb, 0x44, 0xdb,
		0xb7, 0xb1, 0xc8, 0x61, 0x29, 0x8c, 0xdf, 0x61,
		0x98, 0x2a, 0x83, 0x3a, 0xfc, 0x72, 0x8f, 0xae,
		0x1e, 0xda, 0x2f, 0x87, 0xaa, 0x2c, 0x94, 0x80,
		0x85, 0x8b, 0xec };

	/*
	* sha256d will contain the digest of the input message
	*/
	unsigned char sha256d[32];

	/*
	*  sha256_sexp and sha256_lexp contain the expected digests of the inputs messages
	*  They will be compared to sha256d to determine whether the
	*      implementation of sha256 has not been tempered with
	*/
	unsigned char sha256_sexp[32] = {
		0x50, 0xdb, 0xf4, 0x00, 0x66, 0xf8, 0xd2, 0x70,
		0x48, 0x4e, 0xe2, 0xef, 0x66, 0x32, 0x28, 0x2d,
		0xfa, 0x30, 0x0a, 0x85, 0xa8, 0x53, 0x0e, 0xce,
		0xeb, 0x0e, 0x04, 0x27, 0x5e, 0x1c, 0x1e, 0xfd
	};
	unsigned char sha256_lexp[32] = {
		0x3c, 0x59, 0x3a, 0xa5, 0x39, 0xfd, 0xcd, 0xae,
		0x51, 0x6c, 0xdf, 0x2f, 0x15, 0x00, 0x0f, 0x66,
		0x34, 0x18, 0x5c, 0x88, 0xf5, 0x05, 0xb3, 0x97,
		0x75, 0xfb, 0x9a, 0xb1, 0x37, 0xa1, 0x0a, 0xa2
	};

	int exitStatus1 = 0;

	std::cout << "Starting SHA256 test 1/2 : ...";

	if (1 != SHA256->initHashCtx()) exitStatus1 = 1;
	if (1 != SHA256->updateHashCtx((char*)in_short_sha256, 47)) exitStatus1 = 2;
	if (1 != SHA256->finalHashCtx(sha256d)) exitStatus1 = 3;
	if (memcmp(sha256d, sha256_sexp, 32)) exitStatus1 = 4;

	SHA256->cleanup();

	if (0 == exitStatus1) {
		std::cout << "Completed! \n\tSHA256 test 1/2 : Successful.\n";
	}
	else {
		switch (exitStatus1) {
		case 1:
			std::cout << "Terminated! \n\tSHA256 test 1/2 : Failed - initCtx().\n";
			break;
		case 2:
			std::cout << "Terminated! \n\tSHA256 test 1/2 : Failed - updateCtx().\n";
			break;
		case 3:
			std::cout << "Terminated! \n\tSHA256 test 1/2 : Failed - finaleCtx().\n";
			break;
		case 4:
			std::cout << "Terminated! \n\tSHA256 test 1/2 : Failed - memcmp().\n";
			break;
		default:
			break;
		}
	}

	SHA256 = HashContext::createHashContext(sha256);

	int exitStatus2 = 0;

	std::cout << "Starting SHA256 test 2/2 : ...";

	if (1 != SHA256->initHashCtx()) exitStatus2 = 1;
	if (1 != SHA256->updateHashCtx((char*)in_long_sha256, 163)) exitStatus2 = 2;
	if (1 != SHA256->finalHashCtx(sha256d)) exitStatus2 = 3;
	if (memcmp(sha256d, sha256_lexp, 32)) exitStatus2 = 4;

	SHA256->cleanup();

	if (0 == exitStatus2) {
		std::cout << "Completed! \n\tSHA256 test 2/2 : Successful.\n";
	}
	else {
		switch (exitStatus2) {
		case 1:
			std::cout << "Terminated! \n\tSHA256 test 2/2 : Failed - initCtx().\n";
			break;
		case 2:
			std::cout << "Terminated! \n\tSHA256 test 2/2 : Failed - updateCtx().\n";
			break;
		case 3:
			std::cout << "Terminated! \n\tSHA256 test 2/2 : Failed - finaleCtx().\n";
			break;
		case 4:
			std::cout << "Terminated! \n\tSHA256 test 2/2 : Failed - memcmp().\n";
			break;
		default:
			break;
		}
	}

	delete(SHA256);

	if (exitStatus1 != 0) return exitStatus1;
	if (exitStatus2 != 0) return exitStatus2;
	return 0;
}