/*
* Copyright 2018 El Mostafa IDRASSI <mostafa.idrassi@tutanota.com>.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#include <iostream>
#include <cstring>

#include "HashContext.h"

/*  ====================================================================
*	Makes sure the sha1 API is working as expected
*	Based on FIPS 180-4 NIST test vectors (byte-oriented) : http://csrc.nist.gov/groups/STM/cavp/secure-hashing.html
*/

int sha512Test()
{
	HashContext * SHA512 = HashContext::createHashContext(sha512);

	/*
	* in_short_sha512 contains the input short test vector
	* in_long_sha512 contains the input long test vector
	*/
	unsigned char in_short_sha512[11] = { 0x62, 0x13, 0xe1, 0x0a, 0x44, 0x20, 0xe0, 0xd9,
		0xb7, 0x70, 0x37 };
	unsigned char in_long_sha512[227] = { 0x4f, 0x05, 0x60, 0x09, 0x50, 0x66, 0x4d, 0x51,
		0x90, 0xa2, 0xeb, 0xc2, 0x9c, 0x9e, 0xdb, 0x89,
		0xc2, 0x00, 0x79, 0xa4, 0xd3, 0xe6, 0xbc, 0x3b,
		0x27, 0xd7, 0x5e, 0x34, 0xe2, 0xfa, 0x3d, 0x02,
		0x76, 0x85, 0x02, 0xbd, 0x69, 0x79, 0x00, 0x78,
		0x59, 0x8d, 0x5f, 0xcf, 0x3d, 0x67, 0x79, 0xbf,
		0xed, 0x12, 0x84, 0xbb, 0xe5, 0xad, 0x72, 0xfb,
		0x45, 0x60, 0x15, 0x18, 0x1d, 0x95, 0x87, 0xd6,
		0xe8, 0x64, 0xc9, 0x40, 0x56, 0x4e, 0xaa, 0xfb,
		0x4f, 0x2f, 0xea, 0xd4, 0x34, 0x6e, 0xa0, 0x9b,
		0x68, 0x77, 0xd9, 0x34, 0x0f, 0x6b, 0x82, 0xeb,
		0x15, 0x15, 0x88, 0x08, 0x72, 0x21, 0x3d, 0xa3,
		0xad, 0x88, 0xfe, 0xba, 0x9f, 0x4f, 0x13, 0x81,
		0x7a, 0x71, 0xd6, 0xf9, 0x0a, 0x1a, 0x17, 0xc4,
		0x3a, 0x15, 0xc0, 0x38, 0xd9, 0x88, 0xb5, 0xb2,
		0x9e, 0xdf, 0xfe, 0x2d, 0x6a, 0x06, 0x28, 0x13,
		0xce, 0xdb, 0xe8, 0x52, 0xcd, 0xe3, 0x02, 0xb3,
		0xe3, 0x3b, 0x69, 0x68, 0x46, 0xd2, 0xa8, 0xe3,
		0x6b, 0xd6, 0x80, 0xef, 0xcc, 0x6c, 0xd3, 0xf9,
		0xe9, 0xa4, 0xc1, 0xae, 0x8c, 0xac, 0x10, 0xcc,
		0x52, 0x44, 0xd1, 0x31, 0x67, 0x71, 0x40, 0x39,
		0x91, 0x76, 0xed, 0x46, 0x70, 0x00, 0x19, 0xa0,
		0x04, 0xa1, 0x63, 0x80, 0x6f, 0x7f, 0xa4, 0x67,
		0xfc, 0x4e, 0x17, 0xb4, 0x61, 0x7b, 0xbd, 0x76,
		0x41, 0xaa, 0xff, 0x7f, 0xf5, 0x63, 0x96, 0xba,
		0x8c, 0x08, 0xa8, 0xbe, 0x10, 0x0b, 0x33, 0xa2,
		0x0b, 0x5d, 0xaf, 0x13, 0x4a, 0x2a, 0xef, 0xa5,
		0xe1, 0xc3, 0x49, 0x67, 0x70, 0xdc, 0xf6, 0xba,
		0xa4, 0xf7, 0xbb };

	/*
	* sha512d will contain the digest of the input message
	*/
	unsigned char sha512d[64];

	/*
	*  sha512_sexp and sha512_lexp contain the expected digests of the inputs messages
	*  They will be compared to sha384d to determine whether the
	*      implementation of sha384 has not been tempered with
	*/
	unsigned char sha512_sexp[64] = {
		0x99, 0x82, 0xdc, 0x2a, 0x04, 0xdf, 0xf1, 0x65,
		0x56, 0x7f, 0x27, 0x6f, 0xd4, 0x63, 0xef, 0xef,
		0x2b, 0x36, 0x9f, 0xa2, 0xfb, 0xca, 0x8c, 0xee,
		0x31, 0xce, 0x0d, 0xe8, 0xa7, 0x9a, 0x2e, 0xb0,
		0xb5, 0x3e, 0x43, 0x7f, 0x7d, 0x9d, 0x1f, 0x41,
		0xc7, 0x1d, 0x72, 0x5c, 0xab, 0xb9, 0x49, 0xb5,
		0x13, 0x07, 0x5b, 0xad, 0x17, 0x40, 0xc9, 0xee,
		0xfb, 0xf6, 0xa5, 0xc6, 0x63, 0x34, 0x00, 0xc7
	};
	unsigned char sha512_lexp[64] = {
		0xa9, 0xdb, 0x49, 0x0c, 0x70, 0x8c, 0xc7, 0x25,
		0x48, 0xd7, 0x86, 0x35, 0xaa, 0x7d, 0xa7, 0x9b,
		0xb2, 0x53, 0xf9, 0x45, 0xd7, 0x10, 0xe5, 0xcb,
		0x67, 0x7a, 0x47, 0x4e, 0xfc, 0x7c, 0x65, 0xa2,
		0xaa, 0xb4, 0x5b, 0xc7, 0xca, 0x11, 0x13, 0xc8,
		0xce, 0x0f, 0x3c, 0x32, 0xe1, 0x39, 0x9d, 0xe9,
		0xc4, 0x59, 0x53, 0x5e, 0x88, 0x16, 0x52, 0x1a,
		0xb7, 0x14, 0xb2, 0xa6, 0xcd, 0x20, 0x05, 0x25
	};

	int exitStatus1 = 0;

	std::cout << "Starting SHA512 test 1/2 : ...";

	if (1 != SHA512->initHashCtx()) exitStatus1 = 1;
	if (1 != SHA512->updateHashCtx((char*)in_short_sha512, 11)) exitStatus1 = 2;
	if (1 != SHA512->finalHashCtx(sha512d)) exitStatus1 = 3;
	if (memcmp(sha512d, sha512_sexp, 64)) exitStatus1 = 4;

	SHA512->cleanup();

	if (0 == exitStatus1) {
		std::cout << "Completed! \n\tSHA512 test 1/2 : Successful.\n";
	}
	else {
		switch (exitStatus1) {
		case 1:
			std::cout << "Terminated! \n\tSHA512 test 1/2 : Failed - initCtx().\n";
			break;
		case 2:
			std::cout << "Terminated! \n\tSHA512 test 1/2 : Failed - updateCtx().\n";
			break;
		case 3:
			std::cout << "Terminated! \n\tSHA512 test 1/2 : Failed - finaleCtx().\n";
			break;
		case 4:
			std::cout << "Terminated! \n\tSHA512 test 1/2 : Failed - memcmp().\n";
			break;
		default:
			break;
		}
	}

	SHA512 = HashContext::createHashContext(sha512);

	int exitStatus2 = 0;

	std::cout << "Starting SHA512 test 2/2 : ...";

	if (1 != SHA512->initHashCtx()) exitStatus2 = 1;
	if (1 != SHA512->updateHashCtx((char*)in_long_sha512, 227)) exitStatus2 = 2;
	if (1 != SHA512->finalHashCtx(sha512d)) exitStatus2 = 3;
	if (memcmp(sha512d, sha512_lexp, 64)) exitStatus2 = 4;

	SHA512->cleanup();

	if (0 == exitStatus2) {
		std::cout << "Completed! \n\tSHA512 test 2/2 : Successful.\n";
	}
	else {
		switch (exitStatus2) {
		case 1:
			std::cout << "Terminated! \n\tSHA512 test 2/2 : Failed - initCtx().\n";
			break;
		case 2:
			std::cout << "Terminated! \n\tSHA512 test 2/2 : Failed - updateCtx().\n";
			break;
		case 3:
			std::cout << "Terminated! \n\tSHA512 test 2/2 : Failed - finaleCtx().\n";
			break;
		case 4:
			std::cout << "Terminated! \n\tSHA512 test 2/2 : Failed - memcmp().\n";
			break;
		default:
			break;
		}
	}

	delete(SHA512);

	if (exitStatus1 != 0) return exitStatus1;
	if (exitStatus2 != 0) return exitStatus2;
	return 0;
}